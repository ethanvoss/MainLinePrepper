<h1>Line Viewer</h1>
<script src='../public/scripts/chess.js'></script>
<script src='../public/scripts/board.js'></script>
<link rel="stylesheet" href="../public/css/board.css">

<div id='parent' display='flex'>
	<div id='boardDiv' float='left'>
		<div id='board'></div>
	</div>
</div>

<script>

	const board = new Board({width: 400});

	document.addEventListener('boardMove', () => {
		board.move(findMove(board.getFen()));

		function findMove(fen) {
			const depthChess = new Chess(fen);
			var pick = null;
			var sideMult = 1;
			if(depthChess.turn() === 'b') sideMult = -1;
			depthChess.moves().forEach((depth1move) => {
				const movesEndingLeaves = [];
				var worst = null;
				depthChess.load(fen);
				depthChess.move(depth1move);
				const depth1fen = depthChess.fen();

				const depth2Moves = depthChess.moves();
				for(var i in depth2Moves) {
					const depth2move = depth2Moves[i];
					depthChess.load(depth1fen);
					depthChess.move(depth2move);
					const depth2fen = depthChess.fen();
					
					const depth3Moves = depthChess.moves();
					for(var j in depth3Moves) {
						const depth3move = depth3Moves[j];
						depthChess.load(depth2fen);
						depthChess.move(depth3move);
						const eval = evaluateBoard(depthChess.board());

						if(worst === null) worst = eval;
						else if(worst * sideMult > eval) worst = eval;
					}
				}
				if(pick === null) pick = depth1move; 
				else if(pick.eval * sideMult < worst) pick = {eval: worst, move: depth1move};

			})


			return pick.move;

			function evaluateBoard(boardIn) {
				const values = [{piece: 'k', value: 900},{piece: 'q', value: 90},{piece: 'r', value: 50},{piece: 'b', value: 30},{piece: 'n', value: 30},{piece: 'p', value: 10}];
				var eval = 0;
				boardIn.forEach((row) => {
					row.forEach((piece) => {
						if(piece !== null) {
							var pieceValueObj = values.find((value) => { return value.piece === piece.type });
							var evalAdd = pieceValueObj.value;
							if(piece.color === 'b') evalAdd *= -1;
							eval += evalAdd;
						}
					})
				})
				return eval;
			}	
		}	




		// var fetchUrl = 'https://vosstech.herokuapp.com/vossbot/getmove?fen=';
		// fetchUrl += board.getFen();
		// fetch(fetchUrl).then((res) => {
		// 	return res.text();
		// }).then((data) => {
		// 	console.log(data);
		// 	board.move(data);
		// });
	})
	

</script>
