<h1>Line Viewer</h1>
<script src='../public/scripts/chess.js'></script>
<script src='../public/scripts/board.js'></script>
<link rel="stylesheet" href="../public/css/board.css">

<div id='parent' display='flex'>
	<div id='boardDiv' float='left'>
		<div id='board'></div>
	</div>
</div>

<script>

	const board = new Board({width: 400});

	document.addEventListener('boardMove', () => {
		const computerMove = findMove(board.getFen(), 3);
		console.log(computerMove);
		board.move(computerMove);

		function findMove(fen, depth) {

			const depthChess = new Chess(fen);

			const compSide = depthChess.turn();
			var sideMult = 1;
			if(compSide === 'b') sideMult = -1;
			var pick = null;
			


			const depth0moves = depthChess.moves();

			depth0moves.forEach((move) => {
				
				var worstEval = null;

				const positions = [];

				const index0positions = [];
				depthChess.load(fen);
				depthChess.move(move);
				const depth0fen = depthChess.fen();
				const index0moves = depthChess.moves();
				index0moves.forEach((index0move) => {
					const tempChess = new Chess(depth0fen);
					tempChess.move(index0move);
					index0positions.push(tempChess.fen());
				})
				positions.push(index0positions);

				for(var d = 0; d < depth; d++) {
					const currentPositions = positions[d];
					const newPositions = [];

					currentPositions.forEach((position) => {
						const tempChess = new Chess(position);
						var eval = null;
						if(tempChess.in_checkmate() === true && tempChess.turn() === 'w') eval = -9000;
						else if(tempChess.in_checkmate() === true && tempChess.turn() === 'b') eval = 9000;
						if(eval !== null) { 
							if(worstEval === null || eval * sideMult < worstEval * sideMult) worstEval = eval;
						}
						else {
							const moves = tempChess.moves();
							moves.forEach((move) => {
								tempChess.load(position);
								tempChess.move(move);
								newPositions.push(tempChess.fen());
							})
						}
					})
					if(newPositions.length > 0) positions.push(newPositions);
				}
				const endingLeafs = positions[positions.length - 1];
				endingLeafs.forEach((leaf) => {
					const tempChess = new Chess(leaf);
					const eval = evaluateBoard(tempChess.board());
					if(worstEval === null || eval * sideMult < worstEval * sideMult) worstEval = eval;
				})
				if(pick === null || pick.eval * sideMult < worstEval * sideMult) pick = { move: move, eval: worstEval };
			})
			return pick.move;
			
			function evaluateBoard(boardIn) {
				const values = [{piece: 'k', value: 900},{piece: 'q', value: 90},{piece: 'r', value: 50},{piece: 'b', value: 30},{piece: 'n', value: 30},{piece: 'p', value: 10}];
				var eval = 0;
				boardIn.forEach((row) => {
					row.forEach((piece) => {
						if(piece !== null) {
							var pieceValueObj = values.find((value) => { return value.piece === piece.type });
							var evalAdd = pieceValueObj.value;
							if(piece.color === 'b') evalAdd *= -1;
							eval += evalAdd;
						}
					})
				})
				return eval;
			}
			
		}	



		// var fetchUrl = 'https://vosstech.herokuapp.com/vossbot/getmove?fen=';
		// fetchUrl += board.getFen();
		// fetch(fetchUrl).then((res) => {
		// 	return res.text();
		// }).then((data) => {
		// 	console.log(data);
		// 	board.move(data);
		// });
	})
	

</script>
