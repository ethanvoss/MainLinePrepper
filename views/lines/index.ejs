<h1>Line Viewer</h1>
<script src='../public/scripts/board.js'></script>
<script src='../node_modules/chess.js/chess.js'></script>
<link rel="stylesheet" href="../public/css/board.css">




<% if(locals.current) { %>
<a id="mybutton" href="/lines/editor?current=<%= current %>" title="link to edit">
  <button>Edit this line</button>
</a>

<div id='CurrentLineDisplay'>
	<h2 id='CurrentLineName'>Currently looking at </h2>
</div>
<% } %>
<div id='parent' display='flex'>
	
	<% if(locals.current) { %>
		<div id='SideLineDiv'>
			<div id='ParentLine'>
			</div>
			<h2>Side lines</h2>
			<div id='SideLines'>
				
			</div>
		</div>
	<% } else { %>
		<div id='AllLineDiv'>
			<h2>Pick a line to get started</h2>
			<div id='AllLines'>
				<h2>Your Lines</h2>
			</div>
		</div>
	<% } %>
	<div id='boardDiv' float='left'>
		<div id='board'></div>
		<button id='Back' class='BoardButton'>Back</button>
		<button id='Next' class='BoardButton nextButton' float='right'>Next</button>
	</div>

	<div id='PopularDisplay'>
		<h2> Popular lines </h2>
		<div id='popularlines'>
	</div>
</div>
</div>

<script>

	const board = new Board({width: 400, locked: true});
	const lineIds = '<%= lineIds %>'.split(',');
	const lineNames = '<%= lineNames %>'.split(',');
	const lineStartingPositions = '<%= startingPositions %>'.split(',');
	const lockedLines = '<%= lockedLines %>'.split(',');
	const lockedLineParents = '<%= lockedLineParents %>'.split(',');
	updateSideLines('rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR');
	<% if(locals.current) { %> 
		for(var i in lineIds) {
			if(lineIds[i] === '<%= current %>') {
				document.getElementById('CurrentLineName').innerHTML += lineNames[i];
				updateSideLines(lineStartingPositions[i]);
				board.setPosition(lineStartingPositions[i]);
				break;
			}
		}
		for (var i in lockedLines)
		{
			if(lockedLines[i] == '<%= current %>') {
				const parentDiv = document.getElementById('ParentLine');
				const anchor = document.createElement('a');
				const url = '/lines/?current=' + lockedLineParents[i];
				anchor.setAttribute('href', url);
				anchor.innerHTML = 'Parent Line';
				parentDiv.appendChild(anchor);
				break;
			}
		} 
		

	<% } %>
	document.addEventListener('boardMove', function(e){
		updateSideLines(board.getFen());
	})

	function updateSideLines(position)
	{
		<% if(locals.current) { %>
			const LineList = document.getElementById('SideLines');
			LineList.innerHTML = '';
			for(var i in lineIds)
			{
				var transposable = (position === lineStartingPositions[i] && lineIds[i] !== '<%= current %>');
				
				for(var j in lockedLines);
				{
					if(lockedLines[j] == lineIds[i] && lockedLineParents[j] != '<%= current %>')
					{
						transposable = false;
					}	
				}

				if(transposable)
				{
					const link = document.createElement('a');
					var url = "/lines/?current=" + lineIds[i];
					link.setAttribute('href', url);
					link.innerHTML = lineNames[i];
					LineList.appendChild(link);
					LineList.appendChild(document.createElement('br'));
				}
				
			}
		<% } else { %>
			const AllLineList = document.getElementById('AllLines');
			AllLineList.innerHTML = '';
			for(var i in lineIds)
			{
				const isSideLine = lockedLines.some((line) => { return line == lineIds[i] })
				if(!isSideLine) {
					const link = document.createElement('a');
					var url = "/lines/?current=" + lineIds[i];
					link.setAttribute('href', url);
					link.innerHTML = lineNames[i];
					AllLineList.appendChild(link);
					AllLineList.appendChild(document.createElement('br'));
				}
				
			}
		<% } %>
	}

	<% if(locals.positions) { %>
		const nextButton = document.getElementById('Next');
		const backButton = document.getElementById('Back');
		const positions = '<%= positions %>'.split(',');
		var currentMove = 0;

		nextButton.addEventListener('click', (e) => {
			if(currentMove + 1 < positions.length) {
				currentMove++;
				updateBoard();
			}
		})
		backButton.addEventListener('click', (e) => {
			if(currentMove - 1 >= 0) {
				currentMove--;
				updateBoard();
			} 
		})

		function updateBoard()
		{
			board.setPosition(positions[currentMove]);
			updateSideLines(board.getFen());
		}
	<% } %>

</script>
